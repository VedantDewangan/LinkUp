import { useState } from "react";
import Navbar from "../../components/Navbar/Navbar";
import "./CreatePost.css";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import toast from "react-hot-toast";
import { useAuth } from "../../context/AuthContext";
import { GoogleGenerativeAI } from "@google/generative-ai";

function CreatePost() {
  const [loading, setLoading] = useState(false);
  const [image, setImage] = useState(null);
  const [caption, setCaption] = useState("");
  const navigate = useNavigate();
  const { user } = useAuth();
  const [aiLoading, setAiLoading] = useState(false);

  const createAPost = async (e) => {
    e.preventDefault();
    if (loading) return;
    if (!image || !caption || caption.length < 5) {
      toast.error("Please fill both image and caption(atleast 5 characters)");
      return;
    }
    setLoading(true);
    try {
      const apiKey = import.meta.env.VITE_IMGBB_API_KEY;
      const formData = new FormData();
      formData.append("image", image);
      const response = await axios.post(
        `https://api.imgbb.com/1/upload?key=${apiKey}`,
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      await axios.post(
        `${import.meta.env.VITE_API_URL}/api/post/createPost`,
        {
          caption: caption,
          image_link: response.data.data.display_url,
        },
        { withCredentials: true }
      );

      toast.success("Image Posted Successfully");
      navigate(`/profile/${user._id}`);
    } catch (error) {
      console.error(error);
      toast.error("Something went wrong");
    }
    setLoading(false);
  };

  const generateCaption = async () => {
    if (aiLoading) return;
    if (!caption.trim()) {
      toast.error("Please enter a base caption first");
      return;
    }

    setAiLoading(true);

    try {
      const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY); // Replace with your actual API key
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

      const prompt = `
You are an expert social media assistant. Take the user's caption and improve it into an engaging social media post caption.

Requirements:
- Keep it 10–15 words.
- Add relevant emojis.
- Make it fun, creative, and slightly trendy.
- Don't include #

User's caption: "${caption}"

Only return the improved caption.
`;

      const result = await model.generateContent(prompt);
      const responseText = result.response.text().trim();

      setCaption(responseText);
      toast.success("Caption generated by AI! ✨");
    } catch (error) {
      console.error("AI caption error:", error);
      toast.error("Failed to generate caption. Try again later.");
    } finally {
      setAiLoading(false);
    }
  };

  return (
    <div className="page">
      <Navbar />
      <div className="createPost-container">
        <p
          onClick={() => window.history.back()}
          className="back-button-create-post"
        >
          <i className="fa-solid fa-arrow-left"></i>
        </p>
        <h2>Create Post</h2>
        <form onSubmit={createAPost}>
          <input
            type="file"
            accept="image/*"
            onChange={(e) => setImage(e.target.files[0])}
          />
          <textarea
            value={caption}
            onChange={(e) => setCaption(e.target.value)}
            placeholder="Write something about your post..."
            minLength={5}
            maxLength={100}
          />
          <button
            type="button"
            id="caption-by-ai-bot"
            onClick={generateCaption}
          >
            {aiLoading ? (
              <div className="loader-bot"></div>
            ) : (
              <div className="no-loader-bot"></div>
            )}
            <p>Get Better Caption By AI</p>
          </button>
          <button
            type="submit"
            disabled={loading}
            style={{
              opacity: loading ? 0.6 : 1,
              cursor: loading ? "not-allowed" : "pointer",
            }}
          >
            {loading ? "Uploading..." : "Create Post"}
          </button>
        </form>
      </div>
    </div>
  );
}

export default CreatePost;
